/*
 * Fancier: Unified Java, JNI and OpenCL Integration High-Performance GPGPU API.
 * Copyright (C) 2021 Universidad de La Laguna.
 *
 * Fancier is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Fancier is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Fancier.  If not, see <https://www.gnu.org/licenses/>.
 */

/**
 * @file
 * This file contains the main definitions of the Fancier API, that
 * simplifies common operations done by the generated native code.
 * @note Access to the global variables or functions exported is not
 *       thread-safe.
 */

#ifndef _FANCIER_H_
#define _FANCIER_H_

#include <fancier/array.h>
#include <fancier/color.h>
#include <fancier/exception.h>
#include <fancier/image.h>
#include <fancier/java.h>
#include <fancier/log.h>
#include <fancier/math.h>
#include <fancier/ocl.h>
#include <fancier/platform.h>
#include <fancier/utils.h>
#include <fancier/vector.h>
#include <fancier/vector_array.h>


/// The parent directory of all private fancier directories
extern const char* FC_CACHE_BASE_PATH;


/**
 * Check if the class implementation has been updated by Fancier, so that
 * cached data can be deleted.
 * @param className The name of the class.
 * @param lastCodeUpdateTime Timestamp generated by the Fancier compiler.
 * @return Whether if this is a new version of the class or not.
 */
FANCIER_API bool fcCache_updateStoredClassData(const char* className, uint64_t lastCodeUpdateTime);

/**
 * Initialize the global variables exported by this library.
 * The library maintains a count of times this function has been called without
 * calling \c fcFancier_releaseJNI() afterwards, so that global variables are
 * only initialized once and shared across its users.
 * @param env The JNI interface pointer.
 * @see fcFancier_releaseJNI()
 * @return \c true if the initialization succeeded.
 * @throw If the Java classes needed to initialize the global variables of this
 *        library are not found, the corresponding JNI exception will be
 *        thrown.
 */
FANCIER_API jint fcFancier_initJNI(JNIEnv* env);

/**
 * Release the global variables exported by this library.
 * Variables are only released when this function is called as many times as
 * \c fcFancier_initJNI().
 * @param env The JNI interface pointer.
 * @see fcFancier_initJNI()
 */
FANCIER_API void fcFancier_releaseJNI(JNIEnv* env);


#endif  // _FANCIER_H_
